model.subcontract = new DataClass("subcontracts", "public");model.subcontract.id = new Attribute("storage","uuid", "key", {autogenerate:true});model.subcontract.subcontractNumber = new Attribute("storage","long");model.subcontract.subcontractNumberWithProject = new Attribute("calculated","string");model.subcontract.dateContract = new Attribute("storage","date");model.subcontract.dateCommence = new Attribute("storage","date");model.subcontract.dateComplete = new Attribute("storage","date");model.subcontract.dateContractStr = new Attribute("calculated","string");model.subcontract.dateCommenceStr = new Attribute("calculated","string");model.subcontract.dateCompleteStr = new Attribute("calculated","string");model.subcontract.amt_contractOriginal_int = new Attribute("storage","long64");model.subcontract.amt_contractOriginalGross_int = new Attribute("storage","long64");model.subcontract.amt_contractOriginalTax_int = new Attribute("storage","long64");model.subcontract.taxRate = new Attribute("storage","number");model.subcontract.security_isNoSecurity = new Attribute("storage", "bool");model.subcontract.security_isBankGuarantee = new Attribute("storage", "bool");model.subcontract.security_isCashRetention = new Attribute("storage", "bool");model.subcontract.security_securityType = new Attribute("calculated", "string");model.subcontract.spec_drawingListing = new Attribute("storage", "string");model.subcontract.spec_otherDocuments = new Attribute("storage", "string");model.subcontract.spec_program = new Attribute("storage", "string");model.subcontract.spec_scopeOfWorks = new Attribute("storage", "string");model.subcontract.spec_specifications = new Attribute("storage", "string");model.subcontract.spec_worksDescription = new Attribute("storage", "string");model.subcontract.terms_claimDayOfMonth = new Attribute("storage", "string");model.subcontract.terms_defectsPeriod = new Attribute("storage", "string");model.subcontract.terms_liquidatedDamages = new Attribute("storage", "string");model.subcontract.terms_milestoneDates = new Attribute("storage", "string");model.subcontract.terms_paymentTerms = new Attribute("storage", "string");model.subcontract.terms_paymentType = new Attribute("storage", "string");model.subcontract.amt_contractOriginal = new Attribute("calculated","string");model.subcontract.amt_contractOriginalGross = new Attribute("calculated","string");model.subcontract.amt_contractOriginalTax = new Attribute("calculated","string");model.subcontract.amt_toDateApproved_int = new Attribute("storage","number");model.subcontract.amt_toDateClaimed_int = new Attribute("storage","number");model.subcontract.amt_contractRevised_int = new Attribute("calculated","long64");model.subcontract.amt_toDateVariations_int = new Attribute("calculated","long64");model.subcontract.amt_contractRevised = new Attribute("calculated","string");model.subcontract.amt_contractRevisedGross = new Attribute("calculated","string");model.subcontract.amt_contractRevisedTax = new Attribute("calculated","string");model.subcontract.amt_retentionBalance = new Attribute("calculated","string");model.subcontract.amt_retentionTaken = new Attribute("calculated","string");model.subcontract.amt_retentionReleased = new Attribute("calculated","string");model.subcontract.amt_toDateApproved = new Attribute("calculated","string");model.subcontract.amt_toDateClaimed = new Attribute("calculated","string");model.subcontract.amt_toDatePaidTax = new Attribute("calculated","string");model.subcontract.amt_toDatePaidNet = new Attribute("calculated","string");model.subcontract.amt_toDatePaidGross = new Attribute("calculated","string");model.subcontract.amt_toDateVariations = new Attribute("calculated","string");//model.subcontract.contact = new Attribute("relatedEntity", "supplierContact", "supplierContact");//model.subcontract.subcontractCostCode = new Attribute("relatedEntity", "costCodes", "costCodes");//model.subcontract.subcontractTaxCode =  new Attribute("relatedEntity", 'taxCode', 'taxCode');//model.subcontract.retentionScheme = new Attribute("relatedEntity", "cashRetentionScheme", "cashRetentionScheme");model.subcontract.subcontractProject = new Attribute("relatedEntity","project","project");//model.subcontract.payments =  new Attribute("relatedEntities", "supplierPayments", "paymentSubcontract", {reversePath:true});//model.subcontract.variations = new Attribute("relatedEntities", "subcontractVariations", "variationSubcontract", {reversePath:true});var utilities = require('utilities');var multiplier = 1000000;function dateToString(value){		var formatter = require("formatting");	return formatter.formatDate(value, { locale : "fr" });	};model.subcontract.amt_toDateVariations_int.onGet = function(){		var value = this.variations.sum("thisVariationAmount_int");	return utilities.roundToTwo(value);	}model.subcontract.amt_contractRevised_int.onGet = function(){		var value = this.amt_contractOriginal_int + this.amt_toDateVariations_int;	return utilities.roundToTwo(value);}model.subcontract.amt_contractRevised.onGet = function(){	var value = this.amt_contractOriginal_int/multiplier;	return utilities.roundToTwo(value);	}model.subcontract.amt_toDateApproved.onGet = function(){		var value = this.amt_toDateApproved_int/multiplier;;	return utilities.roundToTwo(value);};model.subcontract.amt_contractOriginal.onGet = function(){		var value = this.amt_contractOriginal_int/multiplier;	return utilities.roundToTwo(value);};model.subcontract.amt_contractOriginalTax.onGet = function(){		var value = this.amt_contractOriginalTax_int/multiplier;	return utilities.roundToTwo(value);	};model.subcontract.dateCompleteStr.onGet = function(){return dateToString(this.dateComplete);};model.subcontract.dateCommenceStr.onGet = function(){return dateToString(this.dateCommence);};model.subcontract.amt_toDateClaimed.onGet = function(){return this.amt_toDateClaimed_int/multiplier;};model.subcontract.dateContractStr.onGet = function(){return dateToString(this.dateContract);};model.subcontract.security_securityType.onGet = function(){		switch (true){				case this.security_isNoSecurity:			return "No security";			break;					case this.security_isBankGuarantee:			return "Bank guarantee";			break;					case this.security_isCashRetention:			return "Cash retention";			break;				default:			return "";	}	}var utilities = require('utilities');