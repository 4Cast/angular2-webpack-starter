model.subcontractPayment = new DataClass("subcontractPayments", "public");model.subcontractPayment.id = new Attribute("storage","uuid", "key", {autogenerate:true});model.subcontractPayment.paymentDate = new Attribute("storage", "date");model.subcontractPayment.paymentDetails = new Attribute("storage", "string");model.subcontractPayment.paymentNumber = new Attribute("storage", "long64");model.subcontractPayment.supplierReference = new Attribute("storage", "string");model.subcontractPayment.accountingPeriod = new Attribute("relatedEntity", "period", 'period');model.subcontractPayment.isApproved = new Attribute("storage", "bool");model.subcontractPayment.isExported = new Attribute("storage", "bool");model.subcontractPayment.isFinalPayment = new Attribute("storage", "bool");model.subcontractPayment.thisClaimedAmount_int = new Attribute("storage", 'long64');model.subcontractPayment.thisApprovedAmount_int = new Attribute("storage", 'long64');model.subcontractPayment.thisApprovedAmountTax_int = new Attribute("storage", 'long64');model.subcontractPayment.prevRetentionBalance_int = new Attribute('storage', 'long64');model.subcontractPayment.thisRetentionTaken_int = new Attribute("storage", 'long64');model.subcontractPayment.thisRetentionReleased_int = new Attribute("storage", 'long64');model.subcontractPayment.thisPaidNet_int = new Attribute("storage", "long64");model.subcontractPayment.prevToDateClaimed_int = new Attribute("storage", 'long64');model.subcontractPayment.prevToDateApproved_int = new Attribute("storage", 'long64');model.subcontractPayment.toDateClaimed_int = new Attribute("storage", 'long64');model.subcontractPayment.toDateApproved_int = new Attribute("storage", 'long64');model.subcontractPayment.thisClaimedAmount = new Attribute("calculated", 'number');model.subcontractPayment.thisApprovedAmount = new Attribute("calculated", 'number');model.subcontractPayment.thisApprovedAmountTax = new Attribute("calculated", 'number');model.subcontractPayment.thisRetentionTaken = new Attribute("calculated", 'number');model.subcontractPayment.thisRetentionReleased = new Attribute("calculated", 'number');model.subcontractPayment.thisPaidNet = new Attribute("calculated", "number");model.subcontractPayment.prevToDateClaimed_int = new Attribute("storage", 'long64');model.subcontractPayment.prevToDateClaimed = new Attribute("calculated", 'number');model.subcontractPayment.prevToDateApproved = new Attribute("calculated", 'number');model.subcontractPayment.prevRetentionBalance = new Attribute('calculated', 'number');model.subcontractPayment.toDateClaimed = new Attribute("calculated", 'number');model.subcontractPayment.toDateApproved = new Attribute("calculated", 'number');model.subcontractPayment.approvalStatus = new Attribute("storage", "string");model.subcontractPayment.exportStatus = new Attribute("storage", "string");model.subcontractPayment.isNewPayment = new Attribute("storage", "bool");model.subcontractPayment.thisClaimedAmount.onGet = function(){return this.thisClaimedAmount_int/100};model.subcontractPayment.thisApprovedAmount.onGet = function(){return this.thisApprovedAmount_int/100};model.subcontractPayment.thisApprovedAmountTax.onGet = function(){return this.thisApprovedAmountTax_int/100};model.subcontractPayment.thisRetentionTaken.onGet = function(){return this.thisRetentionTaken_int/100};model.subcontractPayment.thisRetentionTaken.onSet = function(value){		this.thisRetentionTaken_int = value*100;	calculateNet(this);		};model.subcontractPayment.thisRetentionReleased.onGet = function(){return this.thisRetentionReleased_int/100};model.subcontractPayment.thisRetentionReleased.onSet = function(value){		this.thisRetentionReleased_int = value*100;	calculateNet(this)	};model.subcontractPayment.prevToDateClaimed.onGet = function(){return this.prevToDateClaimed_int/100};model.subcontractPayment.prevToDateClaimed.onSet = function(value){this.prevToDateClaimed_int = value*100};model.subcontractPayment.prevToDateApproved.onGet = function(){return this.prevToDateApproved_int/100};model.subcontractPayment.prevToDateApproved.onSet = function(value){this.prevToDateApproved_int = value*100};model.subcontractPayment.prevRetentionBalance.onGet = function(){return this.prevRetentionBalance_int/100};model.subcontractPayment.prevRetentionBalance.onSet = function(value){this.prevRetentionBalance_int = value*100};model.subcontractPayment.toDateClaimed.onGet = function(){return this.toDateClaimed_int/100};model.subcontractPayment.toDateClaimed.onSet = function(value){	debugger;	this.toDateClaimed_int = value*100;	this.thisClaimedAmount_int = this.toDateClaimed_int - this.prevToDateClaimed_int;	};model.subcontractPayment.toDateApproved.onGet = function(){return this.toDateApproved_int/100};model.subcontractPayment.toDateApproved.onSet = function(value){		this.toDateApproved_int = value*100;	this.thisApprovedAmount_int = this.toDateApproved_int - this.prevToDateApproved_int;	calculateNet(this);	};model.subcontractPayment.thisPaidNet.onGet = function(){return this.thisPaidNet_int/100};model.subcontractPayment.paymentSubcontract = new Attribute("relatedEntity", "subcontract", "subcontract")model.subcontractPayment.methods.importJSON = function(jsonString){		ds.subcontractPayment.all().remove();                 var objCollection = JSON.parse(jsonString);   			    objCollection.forEach( function(theObject) { 		    		   		createsubcontractPayment(theObject);		      		  });	}model.subcontractPayment.thisClaimedAmount_int = new Attribute("storage", 'number');model.subcontractPayment.thisApprovedAmount_int = new Attribute("storage", 'number');model.subcontractPayment.thisApprovedAmountTax_int = new Attribute("storage", 'number');model.subcontractPayment.thisRetentionTaken_int = new Attribute("storage", 'number');model.subcontractPayment.thisRetentionReleased_int = new Attribute("storage", 'number');model.subcontractPayment.prevToDateClaimed_int = new Attribute("storage", 'number');model.subcontractPayment.prevToDateApproved_int = new Attribute("storage", 'number');model.subcontractPayment.toDateClaimed_int = new Attribute("storage", 'number');model.subcontractPayment.toDateApproved_int = new Attribute("storage", 'number');model.subcontractPayment.events.init = function(event){				}	model.subcontractPayment.events.validate = function(event){		debugger;		if(this.isNew()){				initialisePayment(this);			}	}model.subcontractPayment.entityMethods.remove = function(){	this.remove();}function initialisePayment(thePayment){				thePayment.paymentDate = new Date();		var theSubcontract =  thePayment.paymentSubcontract;				var paymentsCollection = theSubcontract.payments;		var sortedPayments = paymentsCollection.orderBy('paymentNumber desc');		var lastNumber = theSubcontract.payments.max('paymentNumber');		var lastPayment = sortedPayments.first();		thePayment.isNewPayment = true;		lastNumber++;		thePayment.paymentNumber = lastNumber;		thePayment.prevToDateClaimed_int = lastPayment.toDateClaimed_int;		thePayment.prevToDateApproved_int = lastPayment.toDateApproved_int;		thePayment.toDateClaimed_int = thePayment.prevToDateClaimed_int;		thePayment.toDateApproved_int = thePayment.prevToDateApproved_int;				thePayment.prevRetentionBalance_int = paymentsCollection.sum('prevRetentionBalance');}function calculateNet(thePayment){		thePayment.thisPaidNet_int = thePayment.thisApprovedAmount_int - thePayment.thisRetentionTaken_int + thePayment.thisRetentionReleased_int;	}function createsubcontractPayment(theObject){		 		var theSubcontract = ds.subcontract.find('id == :1', theObject.uid_scnt);		   		     		    	//var theProject = ds.project.find('uid_project = :1', theObject.uid_project);		   		//var theUser = ds.user.find('uid_user = :1', theObject.uid_user);		   				   		var thePeriod = ds.period.find('periodNumber == :1', theObject.accountingPeriod);		     				    var thePayment = new ds.subcontractPayment({				     					     	id							: theObject.uid_spy,				     	paymentDate					: theObject.paymentDate,				     	paymentNumber				: theObject.paymentNumber,				     	paymentDetails				: theObject.paymentDetails,				     	supplierReference			: theObject.supplierReference,				     	isApproved					: theObject.isApproved,				     	isExported					: theObject.isExported,				     	isFinalPayment				: theObject.isFinalPayment,				     	thisClaimedAmount_int		: theObject.thisClaimedAmount*100,				     	thisApprovedAmount_int		: theObject.thisApprovedAmount*100,				     	thisApprovedAmountTax_int	: theObject.thisApprovedAmountGST*100,				     	thisRetentionTaken_int		: theObject.thisRetentionTaken*100,				     	thisRetentionReleased_int	: theObject.thisRetentionReleased*100,				     	prevToDateClaimed_int		: theObject.prevToDateClaimed*100,				     	prevToDateApproved_int		: theObject.prevToDateApproved*100,				     	prevRetentionBalance_int	: theObject.prevRetentionBalance*100,				     	toDateClaimed_int			: theObject.toDateClaimed*100,				     	toDateApproved_int			: theObject.toDateApproved*100,				     	accountingPeriod			: thePeriod,				     	paymentSubcontract			: theSubcontract				     					     				     					     								     					     });		     		    thePayment.save();	}