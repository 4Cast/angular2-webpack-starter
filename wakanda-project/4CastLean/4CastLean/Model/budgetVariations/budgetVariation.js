model.budgetVariation = new DataClass("budgetVariations", "public");model.budgetVariation.id = new Attribute("storage","uuid", "key auto", {autogenerate:true});model.budgetVariation.dateRaised = new Attribute("storage", "date");model.budgetVariation.dateSubmitted = new Attribute("storage", "date");model.budgetVariation.dateApproved = new Attribute("storage", "date");model.budgetVariation.variationNumber = new Attribute("storage", "long");model.budgetVariation.description = new Attribute("storage", "string");model.budgetVariation.eot_costs = new Attribute("storage", "number");model.budgetVariation.eot_costs = new Attribute("storage", "number");model.budgetVariation.eot_days = new Attribute("storage", "number");model.budgetVariation.extensionOfTime = new Attribute("storage", "string");model.budgetVariation.externalReference = new Attribute("storage", "string");model.budgetVariation.isVariationInClaim = new Attribute("storage", "bool");model.budgetVariation.amt_margin = new Attribute("storage", "number");model.budgetVariation.notes = new Attribute("storage", "string");model.budgetVariation.raisedByName = new Attribute("storage", "string");model.budgetVariation.variationStatus = new Attribute("storage", "number");model.budgetVariation.variationStatusName = new Attribute("calculated", "string");model.budgetVariation.amt_variation_int = new Attribute("storage", "long64");model.budgetVariation.amt_variationBalance_int = new Attribute("storage", "long64");model.budgetVariation.amt_claimAmount_int = new Attribute("storage", "long64");model.budgetVariation.amt_claimPercent_int = new Attribute("storage", "long64");model.budgetVariation.amt_variation = new Attribute("calculated", "long");//model.budgetVariation.raisedByUser = new Attribute("relatedEntity", "User", "User");model.budgetVariation.variationProject = new Attribute("relatedEntity", "project", "project");model.budgetVariation.methods.importJSON = function(jsonString){	ds.budgetVariation.all().remove();    var multiplier = 1000000;    var percentMultiplier = 100000;     var objCollection = JSON.parse(jsonString);		    objCollection.forEach( function(theObject) {		    	var theProject = ds.project.find('uid_project = :1', theObject.uid_project);		    	var theUser = ds.user.find('uid_user == :1', theObject.uid_raisedBy);		   		//var theUser = ds.user.find('uid_user = :1', theObject.uid_user);				     theVariation = new ds.budgetVariation({				     	id							: theObject.uid_bvar,				     	variationNumber				: theObject.variationNumber,				     	variationProject 			: theProject,				     //	raisedByUser					: theUser,				     	dateRaised						: theObject.dateRaised,				     	dateSubmitted					: theObject.dateSubmitted,				     	description						: theObject.details,				     	eot_costs							: theObject.eot_costs,				     	eot_days							: theObject.eot_days,				     	extensionOfTime				: theObject.extensionOfTime,				     	externalReference			: theObject.externalReference,				     	isVariationInClaim			: theObject.isVariationInClaim,				     	amt_margin						: theObject.marginAmount,				     	notes									: theObject.notes,				     	raisedByName					: theObject.raisedBy,				     	variationStatus				: theObject.variationStatus,				     	amt_variation_int			: theObject.variationAmount * multiplier,				     	amt_variationBalance_int	: theObject.variationBalance * multiplier,				     	amt_claimAmount_int			: theObject.variationClaimAmount * multiplier,				     	amt_claimPercent_int		: theObject.variationClaimPercent * percentMultiplier				     });		    theVariation.save();		  });}model.budgetVariation.methods.importJSON.scope = "public";model.budgetVariation.variationStatusName.onGet = function(){	switch (this.variationStatus) {		case 1:			return "Estimated";			break;		case 2:			return "Submitted";			break;		case 3:			return "Approved";			break;	}}