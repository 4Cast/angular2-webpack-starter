model.project = new DataClass("projects", "public");model.project.setProperties ({defaultTopSize : 500});model.project.id = new Attribute("storage","uuid", "key", {autogenerate:true});model.project.projectNumber = new Attribute("storage","string");model.project.projectName = new Attribute("storage","string");model.project.dateStart = new Attribute("storage","date", {simpleDate:false});model.project.dateScheduleFinish = new Attribute("storage","date", {simpleDate:false});model.project.dateAdjustedFinish = new Attribute("storage","date");model.project.dateForecastFinish = new Attribute("storage","date");model.project.currentCostingPeriod = new Attribute("storage","long");model.project.projectStartPeriod = new Attribute("storage","long");model.project.projectEndPeriod = new Attribute("storage","long");//model.project.currentCostMonth = new Attribute("relatedEntity","period", "period");model.project.targetMargin = new Attribute("storage","string");model.project.taxRateDefault = new Attribute("storage","string");// I think I would like to put these prefs in a separate class// but leave them here for the momentmodel.project.pref_postCosts = new Attribute("storage","bool");model.project.pref_postGrossToCosts = new Attribute("storage","bool");model.project.pref_contractBasedOn = new Attribute("storage","string");model.project.pref_doNotPaySubcontractors = new Attribute("storage","bool");model.project.pref_allowSundryOrders = new Attribute("storage","bool");model.project.pref_currencySymbol = new Attribute("storage","string");model.project.pref_baseCurrency = new Attribute("storage","string");model.project.superintendant = new Attribute("relatedEntity", "company", "company");model.project.siteContactName = new Attribute("storage", "string");model.project.clientName = new Attribute("storage", "string");model.project.clientABN = new Attribute("storage", "string");model.project.costCodes = new Attribute("relatedEntities", "costCodes", 'project', {reversePath:true});model.project.subcontracts = new Attribute('relatedEntities', 'subcontracts', 'subcontractProject', {reversePath:true});model.project.site = new Attribute("relatedEntity","projectSite", "projectSite");model.project.officeContact = new Attribute("relatedEntity", "person", "person");model.project.methods.importJSON = function(jsonString){var objCollection = JSON.parse(jsonString);		    objCollection.forEach( function(theObject) {												//ds.project.createProject(theObject);		   		ds.project.createProject(theObject);		  });		  		  }	model.project.methods.createProject = function (theObject){	 				    	var theProject = ds.project.find('id = :1', theObject.uid_project);		    			    	if (!theProject){		    		theProject= new ds.project();		    	}		   		//var theUser = ds.user.find('uid_user = :1', theObject.uid_user);				     		     	theProject.id								= theObject.uid_project;		     	theProject.projectNumber					= theObject.projectNumber;		     	theProject.projectName						= theObject.projectName;		     	theProject.currentCostingPeriod				= theObject.currentCostMonth;		     	theProject.projectStartPeriod				= theObject.firstMonth;		     	theProject.projectEndPeriod					= theObject.lastMonth;		     	theProject.dateStart						= theObject.dateStart;		     	theProject.dateScheduleFinish				= theObject.dateFinish;		     	theProject.dateForecastFinish				= theObject.dateForecastFinish;		     	theProject.dateAdjustedFinish				= theObject.dateAdjustedFinish;		     	theProject.targetMargin						= thObject.targetMargin;		     	theProject.pref_postCosts					= theObject.postCosts;		     	theProject.pref_postGrossToCosts			= theObject.postGrossToCosts;		     	theProject.pref_contractBasedOn				= theObject.contractBasedOn;		     	theProject.pref_doNotPaySubcontractors		= theObject.doNotPaySubcontractors;		     	theProject.pref_allowSundryOrders			= theObject.allowSundryOrders;		     	theProject.pref_currencySymbol				= theObject.currencySymbol;		     	theProject.pref_baseCurrency				= theObject.baseCurrency;				     		 		    theProject.save();}model.project.methods.createProject.scope = 'public';