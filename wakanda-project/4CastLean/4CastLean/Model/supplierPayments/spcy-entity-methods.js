//////////////////////////////////////////////////////////////////////////// SCPY Entity methods//////////////////////////////////////////////////////////////////////////model.supplierPayment.entityMethods.isValid = function(attributeName, attrValue) {    debugger;    switch (attributeName) {    case 'paymentDetails':				debugger;        return ds.supplierPayment.validatePaymentDetails();        break;    case 'invoiceNumber':        this.supplierReference = attrValue;        if (this.supplierReference == '') {            return {                "errorNumber": 120,                "errorMessage": "Supplier Reference cannot be blank."            };        }        else {            return {                "errorNumber": 0            };        };        break;    case 'toDateClaimed':        this.toDateClaimed = attrValue;        if (this.toDateClaimed < this.prevToDateClaimed) {            return {                "errorNumber": 130,                "errorMessage": "Claimed to date cannot be less than the previously claimed to date amount."            }        }        else {            return {                "errorNumber": 0            }        }        break;    case 'toDateApproved':        this.toDateApproved = attrValue;               break;    case 'thisRetentionTaken':        this.thisRetentionTaken = attrValue;        if (this.thisRetentionTaken_int > this.thisApprovedAmount_int) {            return {                "errorNumber": 150,                "errorMessage": "Retention taken cannot exceed the approved amount."            };        }        else {            return {                "errorNumber": 0            }        }        break;    case 'thisRetentionReleased':        this.thisRetentionReleased = attrValue;        if (this.thisRetentionTaken_int > this.thisApprovedAmount_int) {            return {               "errorNumber": 160,                "errorMessage": "Retention taken cannot exceed the approved amount."            };        }        else {            return {                "errorNumber": 0            }        }        break;    }}model.supplierPayment.entityMethods.isValid.scope = 'public';//// paymentDetails//model.supplierPayment.entityMethods.validatePaymentDetails = function(attrValue){		if(typeof attrValue != 'undefined'){this.paymentDetails = attrValue};	 if (this.paymentDetails == '') {            return {                "errorNumber": 110,                "errorMessage": "Payment details cannot be blank."            }        }        else {            return {                "errorNumber": 0            }        }	}model.supplierPayment.entityMethods.validatePaymentDetails.scope = 'public';/////////////////////////////////////////////////////////// supplierReference /////////////////////////////////////////////////////////model.supplierPayment.entityMethods.validateSupplierReference = function(attrValue){				if(typeof attrValue != 'undefined'){this.supplierReference = attrValue};	 if (this.supplierReference == '') {            return {                "errorNumber": 120,                "errorMessage": "Supplier Reference cannot be blank."            }        }        else {            return {                "errorNumber": 0            }        }	}model.supplierPayment.entityMethods.validateSupplierReference.scope = 'public';/////////////////////////////////////////////////////////// toDateClaimed /////////////////////////////////////////////////////////model.supplierPayment.entityMethods.validateToDateClaimed = function(attrValue){		debugger;	if(typeof attrValue != 'undefined'){this.toDateClaimed = attrValue};		 if (this.toDateClaimed_int < this.prevToDateClaimed_int) {            return {                "errorNumber": 140,                "errorMessage": "Approved to date cannot be less than the previously approved to date amount."            }        }        else {            return {                "errorNumber": 0            }        }	}model.supplierPayment.entityMethods.validateToDateClaimed.scope = 'public'/////////////////////////////////////////////////////////// toDateApproved /////////////////////////////////////////////////////////model.supplierPayment.entityMethods.validateToDateApproved = function(attrValue){		if(typeof attrValue != 'undefined'){this.toDateApproved = attrValue};		 if (this.toDateApproved_int < this.prevToDateApproved_int) {            return {                "errorNumber": 140,                "errorMessage": "Approved to date cannot be less than the previously approved to date amount."            }        }        else {            return {                "errorNumber": 0            }        }	}model.supplierPayment.entityMethods.validateToDateApproved.scope = 'public'/////////////////////////////////////////////////////////// retentionTaken /////////////////////////////////////////////////////////model.supplierPayment.entityMethods.validateRetentionTaken = function(attrValue){		debugger;		if(typeof attrValue != 'undefined'){this.thisRetentionTaken = attrValue};		 if (this.thisRetentionTaken_int > this.thisApprovedAmount_int) {            return {                "errorNumber": 150,                "errorMessage":  "Retention taken cannot exceed the approved amount."            }        }        else {            return {                "errorNumber": 0            }        }	}model.supplierPayment.entityMethods.validateRetentionTaken.scope = 'public'/////////////////////////////////////////////////////////// retentionReleased/////////////////////////////////////////////////////////model.supplierPayment.entityMethods.validateRetentionReleased = function(attrValue){		if(typeof attrValue != 'undefined'){this.thisRetentionReleased = attrValue};		 if (this.thisRetentionReleased_int > (this.thisRetentionTaken_int + this.prevRetentionBalance_int)) {        return {            error: 160,            errorMessage: "Retention released cannot exceed the total retention balance."        };    }        else {            return {                "errorNumber": 0            }        }	}model.supplierPayment.entityMethods.validateRetentionReleased.scope = 'public'