model.subcontract = new DataClass("subcontracts", "public");model.subcontract.id = new Attribute("storage","uuid", "key", {autogenerate:true});model.subcontract.subcontractNumber = new Attribute("storage","long");model.subcontract.subcontractNumberWithProject = new Attribute("calculated","string"); model.subcontract.dateContract = new Attribute("storage","date"); model.subcontract.dateCommencement = new Attribute("storage","date"); model.subcontract.dateCompletion = new Attribute("storage","date"); model.subcontract.dateContractStr = new Attribute("calculated","string"); model.subcontract.dateCommenceStr = new Attribute("calculated","string"); model.subcontract.dateCompleteStr = new Attribute("calculated","string"); model.subcontract.amt_contractOriginal_int = new Attribute("storage","long64"); model.subcontract.amt_contractOriginalGross_int = new Attribute("storage","long64"); model.subcontract.amt_contractOriginalTax_int = new Attribute("storage","long64");  model.subcontract.amt_toDateApproved_int = new Attribute("storage","long64"); model.subcontract.amt_toDateClaimed_int = new Attribute("storage","long64"); model.subcontract.amt_contractRevised_int = new Attribute("calculated","long64"); model.subcontract.amt_toDateVariations_int = new Attribute("calculated","long64"); model.subcontract.taxRate = new Attribute("storage","number"); model.subcontract.security_isNoSecurity = new Attribute("storage", "bool"); model.subcontract.security_isBankGuarantee = new Attribute("storage", "bool"); model.subcontract.security_isCashRetention = new Attribute("storage", "bool"); model.subcontract.security_securityType = new Attribute("storage", "long"); model.subcontract.security_securityTypeName = new Attribute("calculated", "string"); model.subcontract.spec_drawingListing = new Attribute("storage", "string"); model.subcontract.spec_otherDocuments = new Attribute("storage", "string"); model.subcontract.spec_program = new Attribute("storage", "string"); model.subcontract.spec_scopeOfWorks = new Attribute("storage", "string"); model.subcontract.spec_specifications = new Attribute("storage", "string"); model.subcontract.spec_worksDescription = new Attribute("storage", "string"); model.subcontract.terms_claimDayOfMonth = new Attribute("storage", "string"); model.subcontract.terms_defectsPeriod = new Attribute("storage", "string"); model.subcontract.terms_liquidatedDamages = new Attribute("storage", "string"); model.subcontract.terms_milestoneDates = new Attribute("storage", "string"); model.subcontract.terms_paymentTerms = new Attribute("storage", "string"); model.subcontract.terms_paymentType = new Attribute("storage", "string"); model.subcontract.amt_contractOriginal = new Attribute("calculated","number"); model.subcontract.amt_contractOriginalGross = new Attribute("calculated","number"); model.subcontract.amt_contractOriginalTax = new Attribute("calculated","number"); model.subcontract.amt_contractRevised = new Attribute("calculated","string"); model.subcontract.amt_contractRevisedGross = new Attribute("calculated","string"); model.subcontract.amt_contractRevisedTax = new Attribute("calculated","string"); model.subcontract.amt_retentionBalance = new Attribute("calculated","string"); model.subcontract.amt_retentionTaken = new Attribute("calculated","string"); model.subcontract.amt_retentionReleased = new Attribute("calculated","string"); model.subcontract.amt_toDateApproved = new Attribute("calculated","string"); model.subcontract.amt_toDateClaimed = new Attribute("calculated","string"); model.subcontract.amt_toDatePaidTax = new Attribute("calculated","string"); model.subcontract.amt_toDatePaidNet = new Attribute("calculated","string"); model.subcontract.amt_toDatePaidGross = new Attribute("calculated","string"); model.subcontract.amt_toDateVariations = new Attribute("calculated","string");model.subcontract.contact = new Attribute("relatedEntity", "supplierContact", "supplierContact");model.subcontract.subcontractCostCode = new Attribute("relatedEntity", "costCode", "costCode");//model.subcontract.subcontractTaxRate =  new Attribute("relatedEntity", "taxRate", "taxRate");//model.subcontract.retentionScheme = new Attribute("relatedEntity", "cashRetentionScheme", "cashRetentionScheme");model.subcontract.subcontractProject = new Attribute("relatedEntity","project","project");model.subcontract.costCodeNumber = new Attribute("alias", "long", "subcontractCostCode.number");model.subcontract.supplierName = new Attribute("alias", "long", "contact.contactSupplier.companyName");model.subcontract.supplierCode = new Attribute("alias", "string", 'contact.contactSupplier.supplierCode');model.subcontract.supplier_abn= new Attribute("alias", "string", 'contact.contactSupplier.abn');//model.subcontract.payments =  new Attribute("relatedEntities", "supplierPayments", "paymentSubcontract", {reversePath:true});model.subcontract.variations = new Attribute("relatedEntities", "subcontractVariations", "variationSubcontract", {reversePath:true});var utilities = require('utilities');var multiplier = 10000;model.subcontract.methods.importJSON = function(jsonString){	debugger;	ds.subcontract.all().remove();     var objCollection = JSON.parse(jsonString);		    objCollection.forEach( function(theObject) {		   		//createSubcontract(theObject);		  });}var multiplier = 10000;function createSubcontract(theObject){	 		var theProject = ds.project.find('id == :1', theObject.uid_project);		    var theCostCode = ds.costCode.find('id == :1', theObject.uid_ccod);		    //var theContact = ds.supplierContact.find('id == :1', theObject.uid_scct);		    var theSupplier = ds.supplier.find('id == :1', theObject.uid_sctr);//		    if(theObject.uid_txra){//		   		var theTaxCode = ds.taxCode.find('id == :1', theObject.uid_txra);//		   }		    	//var theProject = ds.project.find('uid_project = :1', theObject.uid_project);		   		//var theUser = ds.user.find('uid_user = :1', theObject.uid_user);				     theSubcontract = new ds.subcontract({				     	id								: theObject.uid_scnt,				     	subcontractNumber				: theObject.scntNumber,				     	dateContract					: theObject.date_contract,				     	dateCommencement				: theObject.date_commenced,				     	dateCompletion					: theObject.date_completed,				     	amt_contractOriginal_int		: theObject.amt_contractOriginal *multiplier,				     	amt_contractOriginalGross_int	: theObject.amt_contractOriginalGross*multiplier,				     	amt_contractOriginalTax_int		: theObject.amt_contractOriginalTax*multiplier,				     	security_isNoSecurity			: theObject.security_isNoSecurity,				     	security_isBankGuarantee		: theObject.security_isBankGuarantee,				     	security_isCashRetention		: theObject.security_isCashRetention,				     	spec_drawingListing				: theObject.spec_drawingListing,				     	spec_otherDocuments				: theObject.spec_otherDocuments,				     	spec_program					: theObject.spec_program,				     	spec_scopeOfWorks				: theObject.spec_scopeOfWorks,				     	spec_specifications				: theObject.spec_specifications,				     	spec_worksDescription			: theObject.spec_worksDescription,				     	terms_claimDayOfMonth			: theObject.terms_claimDayOfMonth,				     	terms_defectsPeriod				: theObject.terms_defectsPeriod,				     	terms_liquidatedDamages			: theObject.terms_liquidatedDamages,				     	terms_milestoneDates			: theObject.terms_milestoneDates,				     	terms_paymentTerms				: theObject.terms_paymentTerms,				     	terms_paymentType				: theObject.terms_paymentType,				     	subcontractProject				: theProject,				     	subcontractCostCode				: theCostCode,				     	contact							: theContact,				     	subcontractTaxCode				: theTaxCode,						supplier						: theSupplier				     });		    theSubcontract.save();}//function dateToString(value){////	var formatter = require("formatting");//	return formatter.formatDate(value, { locale : "fr" });////};//model.subcontract.amt_toDateVariations_int.onGet = function(){////	var value = this.variations.sum("thisVariationAmount_int");//	return utilities.roundToTwo(value);////}//model.subcontract.amt_contractRevised_int.onGet = function(){////	var value = this.amt_contractOriginal_int + this.amt_toDateVariations_int;//	return utilities.roundToTwo(value);//}//model.subcontract.amt_contractRevised.onGet = function(){//	var value = this.amt_contractOriginal_int/multiplier;//	return utilities.roundToTwo(value);////}//model.subcontract.amt_toDateApproved.onGet = function(){////	var value = this.amt_toDateApproved_int/multiplier;;//	return utilities.roundToTwo(value);//};//model.subcontract.amt_contractOriginal.onGet = function(){////	var value = this.amt_contractOriginal_int/multiplier;//	return utilities.roundToTwo(value);//};//model.subcontract.amt_contractOriginalTax.onGet = function(){////	var value = this.amt_contractOriginalTax_int/multiplier;//	return utilities.roundToTwo(value);//	};//model.subcontract.dateCompleteStr.onGet = function(){return dateToString(this.dateComplete);};//model.subcontract.dateCommenceStr.onGet = function(){return dateToString(this.dateCommence);};//model.subcontract.amt_toDateClaimed.onGet = function(){return this.amt_toDateClaimed_int/multiplier;};//model.subcontract.dateContractStr.onGet = function(){return dateToString(this.dateContract);};//model.subcontract.security_securityType.onGet = function(){////	switch (true){////		case this.security_isNoSecurity://			return "No security";//			break;////		case this.security_isBankGuarantee://			return "Bank guarantee";//			break;////		case this.security_isCashRetention://			return "Cash retention";//			break;////		default://			return "";//	}////}//var utilities = require('utilities');