model.subcontractVariation = new DataClass("subcontractVariations", "public");model.subcontractVariation.id = new Attribute("storage","uuid", "key", {autogenerate:true});model.subcontractVariation.variationDate = new Attribute("storage", "date");model.subcontractVariation.variationDetails = new Attribute('storage', 'string');model.subcontractVariation.variationNumber = new Attribute('storage', 'long64');model.subcontractVariation.variationNotes = new Attribute('storage', 'string');model.subcontractVariation.externalReference = new Attribute('storage', 'long64');model.subcontractVariation.amt_prevTotalVariations_int = new Attribute('storage', 'long64');model.subcontractVariation.amt_thisVariationAmount_int = new Attribute('storage', 'long64');model.subcontractVariation.amt_totalVariationsToDate_int = new Attribute ('storage', 'long64');model.subcontractVariation.amt_originalContractAmount_int = new Attribute('storage', 'long64');model.subcontractVariation.amt_prevRevisedValue_int = new Attribute('storage', 'long64');model.subcontractVariation.amt_newRevisedValue_int = new Attribute('storage', 'long64');// we are going to need a relation to head contract variation// but head contract variation does not exist yet.model.subcontractVariation.isApproved = new Attribute('storage', 'bool');model.subcontractVariation.isHeadContract = new Attribute('storage', 'bool');model.subcontractVariation.dateApproved = new Attribute('storage', 'long64');//model.subcontractVariation.raisedBy = new Attribute('relatedEntity', 'User', 'User');model.subcontractVariation.variationSubcontract = new Attribute('relatedEntity', 'subcontract', 'subcontract');model.subcontractVariation.amt_prevTotalVariations = new Attribute('calculated', 'number');model.subcontractVariation.amt_thisVariationAmount = new Attribute('calculated', 'number');model.subcontractVariation.amt_totalVariationsToDate = new Attribute ('calculated', 'number');model.subcontractVariation.amt_originalContractAmount = new Attribute('calculated', 'number');model.subcontractVariation.amt_prevRevisedValue = new Attribute('calculated', 'number');model.subcontractVariation.amt_newRevisedValue = new Attribute('calculated', 'number');model.subcontractVariation.amt_prevTotalVariations.onGet = function(){return this.amt_prevTotalVariations_int/multiplier};model.subcontractVariation.amt_prevTotalVariations.onSet = function(value){this.amt_prevTotalVariations_int = value*multiplier};model.subcontractVariation.amt_thisVariationAmount.onGet = function(){return this.amt_thisVariationAmount_int/multiplier};model.subcontractVariation.amt_thisVariationAmount.onSet = function(value){		this.amt_thisVariationAmount_int = value*multiplier;	this.amt_newRevisedValue_int = this.amt_originalContractAmount_int+this.amt_prevTotalVariations_int+this.amt_thisVariationAmount_int;		}; model.subcontractVariation.amt_totalVariationsToDate.onGet = function(){return this.amt_totalVariationsToDate_int/multiplier};model.subcontractVariation.amt_totalVariationsToDate.onSet = function(value){this.amt_totalVariationsToDate_int = value*multiplier};model.subcontractVariation.amt_originalContractAmount.onGet = function(){return this.amt_originalContractAmount_int/multiplier};model.subcontractVariation.amt_originalContractAmount.onSet = function(value){this.amt_originalContractAmount_int = value*multiplier};model.subcontractVariation.amt_prevRevisedValue.onGet = function(){return this.amt_prevRevisedValue_int/multiplier};model.subcontractVariation.amt_prevRevisedValue.onSet = function(value){this.amt_prevRevisedValue_int = value*multiplier};model.subcontractVariation.amt_newRevisedValue.onGet = function(){return this.amt_newRevisedValue_int/multiplier};model.subcontractVariation.amt_newRevisedValue.onSet = function(value){this.amt_newRevisedValue_int = value*multiplier};model.subcontractVariation.methods.importJSON = function(jsonString){		ds.subcontractVariation.all().remove();                 var objCollection = JSON.parse(jsonString);   			    objCollection.forEach( function(theObject) { 		    		   		createSubcontractVariation(theObject);		      		  });	}function createSubcontractVariation(theObject){		var theSubcontract = ds.subcontract.find('id == :1', theObject.uid_scnt);	//var theUser = ds.user.find('uid_user == :1', theObject.uid_userRaisedBy);				var multiplier = 10000;		// make sure everything is rounded to the nearest cent.			debugger;	var	amt_contractOriginal = round(theObject.scva_amt_contractOriginal);	var amt_amt_prevRevisedValue = round(theObject.amt_amt_prevRevisedValue);	var amt_toDateRevisedValue = round(theObject.amt_toDateRevisedValue);	var amt_thisVariation = round(theObject.amt_thisVariation);		var theVariation = new ds.subcontractVariation({				id								:theObject.uid_scva,		variationDate					:theObject.scvaDate,		variationDetails				:theObject.scvaDetails,		variationNumber					:theObject.scvaNumber,		variationNotes					:theObject.scvaNotes,		externalReference				:theObject.externalReference,		amt_originalContractAmount_int	:amt_contractOriginal * multiplier,		amt_prevRevisedValue_int		:amt_amt_prevRevisedValue * multiplier,		amt_newRevisedValue_int			:amt_toDateRevisedValue,		amt_thisVariationAmount_int		:amt_thisVariation,		isApproved						:theObject.isApproved,		dateApproved					:theObject.dateApproved,	//	raisedBy						:theUser,		variationSubcontract			:theSubcontract			});		theVariation.save();	}var multiplier = 1000000;model.subcontractVariation.methods.fixVariationMultiplier = function(){		ds.subcontractVariation.all().fixMultiplier();	}model.subcontractVariation.methods.fixVariationMultiplier.scope = "public";model.subcontractVariation.collectionMethods.fixMultiplier = function (){		this.forEach(function(theVariation){						theVariation.amt_prevTotalVariations_int = theVariation.amt_prevTotalVariations_int*10000;		theVariation.amt_thisVariationAmount_int = theVariation.amt_thisVariationAmount_int*10000;		theVariation.amt_totalVariationsToDate_int = theVariation.amt_totalVariationsToDate_int*10000;						theVariation.amt_originalContractAmount_int = theVariation.amt_originalContractAmount_int*10000;		theVariation.amt_prevRevisedValue_int = theVariation.amt_prevRevisedValue_int*10000;		theVariation.amt_newRevisedValue_int = theVariation.amt_newRevisedValue_int*10000;								theVariation.save();	});	}function round(theNumber){		var theCents = theNumber *100;	var roundedNumber = Math.round(theCents);	return roundedNumber *10000;	}